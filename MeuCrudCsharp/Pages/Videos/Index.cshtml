@page "{videoId}"
@model MeuCrudCsharp.Pages.Videos.IndexModel
@{
    Layout = "_Layout";
}
<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        background-color: #f0f2f5;
        margin: 0;
        padding: 2rem;
    }

    #videoContainer {
        width: 100%;
        max-width: 900px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    video {
        width: 100%;
        height: auto;
        display: block;
        background-color: #000;
    }

    h1 {
        color: #333;
    }

    .error-message {
        color: #d9534f;
        background-color: #f2dede;
        border: 1px solid #ebccd1;
        padding: 15px;
        border-radius: 4px;
        text-align: center;
    }
</style>
<!-- 1. Importação da biblioteca HLS.js a partir de uma CDN -->
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<h1>Meu Curso Incrível</h1>

<div id="videoContainer">
    <!-- O elemento <video> onde o conteúdo será reproduzido -->
    <video id="videoPlayer" controls></video>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        // --- PONTO DE INTEGRAÇÃO COM O BACKEND (CORRIGIDO) ---
        // O ID do vídeo agora é lido dinamicamente da URL.
        // Para testar, acesse esta página adicionando '?videoId=SEU_GUID' ao final da URL.
        // Exemplo: http://localhost:5000/sua_pagina.html?videoId=f47ac10b-58cc-4372-a567-0e02b2c3d479
        const urlParams = new URLSearchParams(window.location.search);
        const videoId = urlParams.get('videoId');

        if (!videoId) {
            const errorMessage = "ERRO: O ID do vídeo não foi encontrado na URL. Adicione '?videoId=SEU_GUID' ao final da URL.";
            console.error(errorMessage);
            // Mostra uma mensagem de erro visual para o usuário
            document.getElementById('videoContainer').innerHTML = `<div class="error-message">${errorMessage}</div>`;
            return;
        }
        // ---------------------------------------------
        // Pega o ID do vídeo diretamente do modelo C# que já foi validado!
        const videoId = "@Model.VideoId";

        // O resto do seu script HLS.js continua igual...
        const videoElement = document.getElementById('videoPlayer');
        const manifestUrl = `/api/streaming/${videoId}/manifest.m3u8`;
        
        // 3. Verifica se o navegador suporta HLS através da biblioteca HLS.js
        if (Hls.isSupported()) {
            console.log("HLS.js é suportado. Inicializando player...");
            const hls = new Hls();
            hls.loadSource(manifestUrl);
            hls.attachMedia(videoElement);
            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                console.log("Manifesto carregado. Reproduzindo vídeo.");
                // Opcional: iniciar o vídeo automaticamente.
                // videoElement.play();
            });
            hls.on(Hls.Events.ERROR, function (event, data) {
                if (data.fatal) {
                    console.error('Erro fatal do HLS.js:', data);
                }
            });
        }
        // 4. Fallback para navegadores que suportam HLS nativamente (como o Safari)
        else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
            console.log("Suporte nativo a HLS detectado.");
            videoElement.src = manifestUrl;
        } else {
            console.error("Este navegador não suporta a reprodução de vídeos HLS.");
        }
    });
</script>
