@page "{videoId}"
@using MeuCrudCsharp.Models
@model MeuCrudCsharp.Pages.Videos.Player.IndexModel
@{
    // Define o título da aba do navegador com o título do vídeo
    ViewData["Title"] = Model.VideoData?.Title ?? "Vídeo";
}

<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        background-color: #f0f2f5;
        margin: 0;
        padding: 2rem;
    }

    #videoContainer {
        width: 100%;
        max-width: 900px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
        background-color: #000;
    }

    video {
        width: 100%;
        height: auto;
        display: block;
    }

    h1 {
        color: #333;
        margin-bottom: 1.5rem;
    }

    .status-message {
        color: #333;
        background-color: #fff;
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
    }
</style>

<!-- 1. Importação da biblioteca HLS.js a partir de uma CDN -->
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<!-- O título agora é dinâmico, vindo do banco de dados -->
<h1>@Model.VideoData?.Title</h1>

<div id="videoContainer">
    @if (Model.VideoData != null && Model.VideoData.Status == VideoStatus.Available)
    {
        <!-- O elemento <video> onde o conteúdo será reproduzido -->
        <video id="videoPlayer" controls></video>
    }
    else
    {
        <!-- Mensagem exibida se o vídeo não estiver disponível -->
        <div class="status-message">
            <p>Este vídeo ainda está sendo processado ou não está disponível. Por favor, tente novamente mais tarde.</p>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Pega o elemento de vídeo. Se ele não existir (porque o vídeo não está disponível),
        // o script não faz nada.
        const videoElement = document.getElementById('videoPlayer');
        if (!videoElement) return;

        // --- PONTO DE INTEGRAÇÃO CORRIGIDO ---
        // Pega o ID do vídeo diretamente do modelo C#, que já foi validado pelo backend.
        // Isso é mais seguro e robusto do que ler da URL no frontend.
        const videoId = "@Model.VideoId";

        // Monta a URL para o manifesto no seu controller de streaming
        const manifestUrl = `/api/videos/${videoId}/manifest.m3u8`;

        // O resto do seu script HLS.js continua igual...
        if (Hls.isSupported()) {
            console.log("HLS.js é suportado. Inicializando player...");
            const hls = new Hls();
            hls.loadSource(manifestUrl);
            hls.attachMedia(videoElement);
            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                console.log("Manifesto carregado.");
            });
            hls.on(Hls.Events.ERROR, function (event, data) {
                if (data.fatal) {
                    console.error('Erro fatal do HLS.js:', data);
                }
            });
        }
        else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
            console.log("Suporte nativo a HLS detectado.");
            videoElement.src = manifestUrl;
        } else {
            console.error("Este navegador não suporta a reprodução de vídeos HLS.");
        }
    });
</script>
